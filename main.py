import streamlit as st
import cv2
import numpy as np
import pandas as pd
from ultralytics import YOLO
import tensorflow as tf
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

# T·∫£i m√¥ h√¨nh YOLO
model_yolo = YOLO("best.pt")

# T·∫£i m√¥ h√¨nh CNN
model_cnn = tf.keras.models.load_model('cnn_model.h5')
feature_extractor = tf.keras.Model(inputs=model_cnn.layers[0].input, outputs=model_cnn.layers[-7].output)

# ƒê·ªçc √Ω nghƒ©a bi·ªÉn b√°o t·ª´ name_signs.txt
with open("name_signs.txt", "r", encoding='utf-8') as f:
    name_signs = [line.strip() for line in f.readlines()]

# ƒê·ªçc v√†o file csv ch·ª©a c√°c ƒë·∫∑c tr∆∞ng ƒë√£ l∆∞u
feature_signs = pd.read_csv("features.csv")

# Preprocess image for CNN model
def preprocess_image(image):
    img = cv2.resize(image, (32, 32)) / 255.0
    img = img.reshape(1, 32, 32, 3)
    return img

def regconize_traffic_sign(feature):
    similarities = []
    for i in range(0, feature_signs.shape[0]):
        temp = np.array(feature_signs.iloc[i, 1:]).reshape(1, -1)
        simi = cosine_similarity(feature, temp)
        similarities.append(simi)
    # st.write(similarities)
    index = int(feature_signs.iloc[np.argmax(similarities), 0])
    return index

# H√†m detect bi·ªÉn b√°o giao th√¥ng
def detect_traffic_sign(image, conf):
    with st.spinner("ƒêang nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng..."):
        results = model_yolo.predict(image, conf=conf)
        st.write("·∫¢nh k·∫øt qu·∫£ detect bi·ªÉn b√°o giao th√¥ng")
        st.image(results[0].plot(conf=True, labels=False))

        cols = st.columns(2)
        for result in results:
            orig_img = result.orig_img
            boxes = result.boxes

            for i, box in enumerate(boxes):
                x_min, y_min, x_max, y_max = map(int, box.xyxy[0])
                cropped_img = orig_img[y_min:y_max, x_min:x_max]  # Crop bi·ªÉn b√°o kh·ªèi ·∫£nh g·ªëc

                with cols[i % 2]:
                    st.write(f"**Bi·ªÉn b√°o {i+1}**")
                    st.image(cropped_img)

                    cropped_img = preprocess_image(cropped_img)
                    feature = feature_extractor.predict(cropped_img)

                    index = regconize_traffic_sign(feature)
                    st.write(f"**T√™n bi·ªÉn b√°o:** {name_signs[index - 1]}")

# Giao di·ªán ch√≠nh
st.set_page_config(page_title="Nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng", layout="wide")
st.title("üö¶ ·ª®ng d·ª•ng nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng")
st.markdown("""
·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng YOLO v√† CNN ƒë·ªÉ ph√°t hi·ªán v√† nh·∫≠n di·ªán c√°c bi·ªÉn b√°o giao th√¥ng trong ·∫£nh.
- **B∆∞·ªõc 1**: T·∫£i ·∫£nh bi·ªÉn b√°o giao th√¥ng l√™n.
- **B∆∞·ªõc 2**: Ch·ªçn m·ª©c ƒë·ªô `confidence`.
- **B∆∞·ªõc 3**: Xem k·∫øt qu·∫£!
""")

st.sidebar.header("C·∫•u h√¨nh")
conf = st.sidebar.slider("Ng∆∞·ª°ng confidence", 0.0, 1.0, 0.5)
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file ·∫£nh", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # ƒê·ªçc ·∫£nh
    image = cv2.imdecode(np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8), 1)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    st.image(image, caption="·∫¢nh g·ªëc")
    detect_traffic_sign(image, conf)
else:
    st.info("Vui l√≤ng t·∫£i l√™n m·ªôt file ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
